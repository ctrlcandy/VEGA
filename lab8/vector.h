#ifndef VECTOR_H
#define VECTOR_H


/**
* Установить объём (capacity) вектора в значение большее или равное newCap.
* Если ‘newCap <= capacity‘, ничего не делает.
* @param newCap Новый объём
*/
void reserve(size_t newCap);

/**
* Получить значение элемента по заданной позиции
* @param index Позиция
*/
int getValue(size_t index);

/**
* Получить размер вектора
* (количество добавленных элементов)
*/
size_t getSize();

/**
* Получить вместимость вектора
* (максимальное количество элементов, которое можно хранить в
* выделенном на данный момент блоке памяти)
*/
size_t getCapacity();

/**
* Добавить значение в конец вектора.
* Если выделенной памяти не достаточно
* для добавления элемента,
* выделить новый массив большего размера
* и скопировать в него старые значения
* @param value Значение
*/
void append(int value);

/**
* Добавить несколько значений из массива в конец вектора.
* Если выделенной памяти недостаточно,
* см. void append(int)
* @param array Массив
* @param count Количество элементов
*/
void append(int *array, size_t count);

/**
* Вставить значение на заданную позицию.
* и сдвинуть элементы справа.
* Если выделенной памяти недостаточно,
* см. void append(int)
* @param index Позиция вставки
* @param value Значение
*/
void insert(size_t index, int value);

/**
* Удалить элемент на заданной позиции
* @param index Позиция
*/
void erase(size_t index);

/**
* Найти первый элемент с заданным значением
* и вернуть его индекс.
* Если элемента нет, вернуть -1
* @param value Значение
*/
int indexOf(int value);

/**
* Изменить размер выделенной памяти так,
* чтобы он соответсововал
* количеству элементов в векторе.
* Если размер вектора равен нулю,
* очистить память (delete[]).
*/
void squeeze();

/**
* Очистить вектор --- заполнить выделенную память нулями
* и установить размер, равный нулю.
*/
void clear();

/**
* Вывести в std::cout элементы массива,
* последовательно, через пробел и запятую.
* Пример:
* 1, 2, 3, 4
*/
void print();


#endif // VECTOR_H 
